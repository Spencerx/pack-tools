#!/bin/sh

#TODO: perhaps there's easier way to do this with osc vc
#TODO: we can't handle filenames with spaces inside

function usage {
	printf "usage: $0 [ -c file.changes ] [ -n new_entry_file ] [ -s save_as_filename ]\n"
	exit 1
}

function cleanup {
	rm -f $NEW_CHANGES
	if [ -n "$TEMP_ENTRY_FILE" ]; then
		rm -f $ENTRY_FILE
	fi
}

trap cleanup SIGINT SIGTERM

while getopts "c:n:s:" opt; do
	case "$opt" in
	c) # .changes file name
		CHANGES="$OPTARG"
		;;
	n) # file with the new changelog entry
		ENTRY_FILE="$OPTARG"
		;;
	s) # name under which the new changelog entry file will be saved
		SAVE_ENTRY="$OPTARG"
		;;
	\?) # unknown flag
		usage
	esac
done

# if no .changes file was specified on the command line,
# we take the first .changes file we can find
if [ ! -s "$CHANGES" ]; then
	CHANGES=$(ls -1 *.changes | head -n 1)
	printf "Using $CHANGES as .changes file. You can override it with -c.\n"
fi

if [ ! -s "$CHANGES" ]; then
	printf "Can't find .changes file. Specify package name with -c.\n"
	exit 1
fi

# create a temporary file if we didn't get a name on command line
if [ -z "$ENTRY_FILE" ]; then
	ENTRY_FILE=$(mktemp)
	TEMP_ENTRY_FILE="yes"

	# osc vc appends .changes to the filename if it doesn't end with it
	osc vc $ENTRY_FILE
	#TODO check whether $ENTRY_FILE already ends with .changes
	ENTRY_FILE=$ENTRY_FILE.changes
fi

if [ ! -s "$ENTRY_FILE" ]; then
	printf "New changelog entry is empty\n"
	exit 1
fi

NEW_CHANGES=$(mktemp)
cat $ENTRY_FILE $CHANGES > $NEW_CHANGES
mv $NEW_CHANGES $CHANGES

# rename the entry file
if [ -n "$SAVE_ENTRY" ]; then
	mv -f $ENTRY_FILE $SAVE_ENTRY
fi

cleanup
