#!/usr/bin/python

import os
import xml.dom.minidom
import subprocess
import shutil

#get current 
cwd = os.getcwd()

#run through every directory in tree(tree starts at current directory)
for root, dirs, files in os.walk(cwd):
    #if it is OSC directory
    if '.osc' in dirs:
        
        #specially package directory
        if os.path.exists(root + '/.osc/_package'):
            
            #obtain some basic info
            package_name = open(root + '/.osc/_package').read().strip()
            project_name = open(root + '/.osc/_project').read().strip()
            apiurl = open(root + '/.osc/_apiurl').read().strip()
            files_xml = open(root + '/.osc/_files').read()
            dom = xml.dom.minidom.parseString(files_xml)
            print '____________________________'
            print package_name + '/' + project_name + ' ---> ' + root
            
            #try to get original project, from which was this one branched
            try:
                original_name = dom.getElementsByTagName('linkinfo')[0].getAttribute('project')
                print "original project ---> " + original_name
            except IndexError:
                print "ERROR: Could not find original project"
                continue
            try:
                webxml = subprocess.check_output(['osc', 'cat', apiurl + '/source/' + original_name + '/' + package_name.split('.')[0]])
            except subprocess.CalledProcessError as e:
                print 'ERROR: Cound not obtain remote information'
                continue
            webdom = xml.dom.minidom.parseString(webxml)
            
            #try to follow link to actual project location
            try:
                linkinfo = webdom.getElementsByTagName('linkinfo')[0]
                magic_package = linkinfo.getAttribute('package')
                magic_project = linkinfo.getAttribute('project')
                print "Corrected to project: " + magic_project + " and package: " + magic_package
                webxml = subprocess.check_output(['osc', 'cat', apiurl + '/source/' + magic_project + '/' + magic_package])
                webdom = xml.dom.minidom.parseString(webxml)
            except IndexError:
                print

            #try to pair the files, at first, try to map local files to remote ones    
            ok = True
            for elem in dom.getElementsByTagName('entry'):
                haselem = False               
                for webelem in webdom.getElementsByTagName('entry'):
                    if elem.getAttribute('name') == webelem.getAttribute('name'):

                        #compare modification times (mtime)
                        mtime = elem.getAttribute('mtime')
                        webmtime = webelem.getAttribute('mtime')
                        if mtime > webmtime:
                            print "File " + elem.getAttribute('name') + " is older in your local version."
                            ok = False
                        elif mtime < webmtime:
                            print "File " + elem.getAttribute('name') + " is older in remote version."
                            ok = False
                        else:
                            print "File " + elem.getAttribute('name') + " ... OK"
                        haselem = True
                        break
                if haselem == False:
                    print "File " + elem.getAttribute('name') + ' is missing in remote version.'
                    ok = False
                    
            #second run - try to map remote files to local (so we dont miss missing local files)
            for webelem in webdom.getElementsByTagName('entry'):
                haselem = False
                for elem in dom.getElementsByTagName('entry'):
                    if elem.getAttribute('name') == webelem.getAttribute('name'):
                        haselem = True
                        break
                if haselem == False:
                    print "File " + webelem.getAttribute('name') + " is missing in local version."
                    ok = False
                    
            #if something went wrong        
            if ok == False:
                print
                print '(1) Remove ' + project_name + '/' + package_name + ' from build service'
                print '(2) Remove local files'
                print '(3) Remove local files and remove ' + project_name + '/' + package_name + ' from build service'
                print '(4) Exit'
                print '(0) Skip'
                action = raw_input("What action do you choose? ")
 
                if action == '1':
                    print "This action will delete package " + package_name + " in project " + project_name
                    answer = raw_input('Are you sure? (y/n) ')
                    if answer == 'y':
                        subprocess.call(['osc', '-A', apiurl, 'rdelete', project_name, package_name])
                
                elif action == '2':
                    print "This action will delete files below:"
                    for dirname, dirnames, filenames in os.walk(root):
                        for filename in filenames:
                            print os.path.join(dirname, filename)
  
                    answer = raw_input('Are you sure? (y/n) ')
                    if answer == 'y':
                        shutil.rmtree(root)
                
                elif action == '3':
                    print "This action will delete package " + package_name + " in project " + project_name
                    answer = raw_input('Are you sure? (y/n) ')
                    if answer == 'y':
                        subprocess.call(['osc', '-A', apiurl, 'rdelete', project_name, package_name])
                    
                    print "This action will also delete files below:"
                    for dirname, dirnames, filenames in os.walk(root):
                        for filename in filenames:
                            print os.path.join(dirname, filename)
                    answer = raw_input('Are you sure? (y/n) ')
                    if answer == 'y':
                        shutil.rmtree(root)
            
                elif action == '4':
                    exit()
                
                elif action == '0':
                    pass