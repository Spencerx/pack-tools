#!/bin/bash
#fast package unpacking & quilt series creation by dlovasko@suse.com

#un/comment for debug/release
#todo determine if normal or special - if ends patch.gz
set -x

#check if we are in osc directory
if [ ! -e .osc/_package ]
then
	echo "ERROR: not in osc package directory"
	exit 1
fi

gzip_define="__gzip gzip"

#prepare arguments
eval set -- `getopt -a -o g --long gzip-special -o h --long 'help' -- "${@}"`

#process arguments
verbose=no
while [ -n "$1" ]
do
	case $1 in
		-v|--verbose)
			verbose=yes
			shift
		;;
		-g|--gzip-special)
			gzip_define="__gzip function takefirst { basename \"\$2\" ; } ; takefirst"
			shift
		;;
		-h|--help)
			echo "prep subcommand: fast package unpacking & quilt series creation"
			echo "usage: pkg prep [-h|--help] [-g|--gzip-special] [specfile]"
			exit 1
		;;
		--)
			shift
			break
		;;
	esac
done

#specfile name
if [ -n "$1" ]
then
	spec="$1"
else
	spec=$(cat .osc/_package | sed 's/\..*//').spec
fi

if [ -z "$spec" -o ! -e "$spec" ] 
then
	echo "ERROR: no spec file"
	exit 1
fi

#check if prep contains quilt operations
if sed -n '/^%prep/,/^$/p' $spec | grep -q quilt
then
	echo "warninig: your prep script is doing something nasty with quilt. this will probably break this script. continue? (y/n)"
	read answer
	if [ $answer != 'y' ]
	then
		exit 1
	fi
fi

#run rpmbuild
##only prep phase -bp
##do not check for dependencies(since there is no actual building process)
##locate sources in cwd
##extract in tmp dir
##every patchname is written to a series file
##gzipped patches are processed nearly the same, except the rpmbuild is always appending the -dc option, so we skip it with inline takefirst function
##in the prep_post phase - quilt setup seriesfile && quilt push -a
##copy back

salt=`tr -dc A-Za-z0-9_ < /dev/urandom | head -c 8`

builddir=$(mktemp -d)
sourcedir=$(pwd)
echo $gzip_define
rpmbuild \
  --define="_sourcedir $sourcedir" \
  --define="_builddir $builddir" \
  --define="__cat basename" \
  --define="$gzip_define" \
  --define="__patch xargs echo >> series_tmp_$salt" \
  --define="__spec_prep_post test -e series_tmp_$salt && cat series_tmp_$salt && cat series_tmp_$salt | sed  -e 's/-s//' -e 's/-b --suffix .* //' | sed s/--fuzz=.// | tr -s ' ' | awk 'BEGIN {FS=OFS=\" \"} {temp=\$1; \$1=\$2; \$2=temp} {print}' > pkg_series_$salt && quilt setup --fuzz=0 \$PWD/pkg_series_$salt ; rm -f series_tmp_$salt ; test -e pkg_series_$salt && cat pkg_series_$salt | cut -d' ' -f1 | sed s@^@${sourcedir}/@ | xargs cp -t patches/  && quilt push -a ; test -e pkg_series_$salt && ln -s -f pkg_series_$salt series ; exit 0 " \
  -bp \
  --nodeps \
  $spec

# remove all garbage from directory (mainly patches)
find $builddir -maxdepth 1 -not -type d -exec rm -f {} +

#remove the unpacked dirs in current location
#XXX: note that this predicate matches the /tmp/tmp.blablabla as well, but -f solves that :)
find $builddir -maxdepth 1 -type d -printf '%f\n' | xargs rm -rf

#move things back
mv -f $builddir/* .
rm -rf $builddir
