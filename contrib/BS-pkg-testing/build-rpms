#!/bin/bash
#
# Locally build one or more rpms via 'osc build' (for a single
# repository/arch combination) from their package's working
# directories locally checked out from a Build Service.
#
# Optionally runs the associated source services via
# 'run-source-services'.

me=`basename $0`

usage () {
    # Call as: usage [EXITCODE] [USAGE MESSAGE]
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi
    if [ -n "$1" ]; then
        echo "$*" >&2
        echo
    fi

    cat <<EOF >&2
Usage: $me [options] BSDIR [BSDIR ...]
Options:
  -c, --command=COMMAND  Run COMMAND instead of \`osc service disabledrun'
  -d, --disabledrun      Run \`osc service disabledrun' before build
  -l, --local-source     Switch tar_scm source service url to file://SRCDIR
                         as returned by 'source-dir-for BSDIR'.  Implies -d
                         unless -c is also specified.
  -r, --revision=REV     Switch tar_scm source service revision to REV.
                         Implies -d unless -c is also specified.
  -R, --repository=REPO  Build for repository REPO
  -a, --arch=ARCH        Build for arch ARCH
  -o, --offline          (option passed to osc build)
  -h, --help             Show this help
EOF
    exit "$exit_code"
}

parse_opts () {
    command=()
    disabledrun=
    local_source=
    offline=
    revision=()

    while [ -n "$1" ]; do
        case "$1" in
            -h|--help)
                usage 0
                ;;
            -o)
                offline=-o
                shift
                ;;
            -c|--command)
                command=(-c "$2")
                shift 2
                ;;
            -d|--disabledrun)
                disabledrun=-d
                shift
                ;;
            -l|--local-source)
                local_source=-l
                shift
                ;;
            -r|--revision)
                revision=(-r "$2")
                shift 2
                ;;
            -R|--repository)
                repository="$2"
                shift 2
                ;;
            -a|--arch)
                arch="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done

    if [ $# = 0 ]; then
        usage "You must specify at least one rpm to build."
    fi

    if [ -n "$arch" ] && [ -z "$repository" ]; then
        usage "Cannot specify arch without repository."
    fi

    if [ -z "$command" ]; then
        if [ -n "$local_source" ] || [ -n "$revision" ]; then
            disabledrun=-d
        fi
    fi

    bs_dirs=( "$@" )
}

die () {
    echo "$*; aborting." >&2
    exit 1
}

build_rpm () {
    local BS_pkg_dir="$1"

    if [ ! -d "$BS_pkg_dir" ]; then
        die "$BS_pkg_dir does not exist"
    fi

    cd $BS_pkg_dir

    if [ -n "$disabledrun" ]; then
        if ! run-source-services \
            "${command[@]}" $disabledrun $local_source "${revision[@]}" \
            "$BS_pkg_dir"
        then
            exit 1
        fi
    fi

    d="${BS_pkg_dir#$HOME/}"
    rpm_out_dir="$HOME/tmp/build-rpms/${d//\//_}"

    mkdir -p "$rpm_out_dir"
    find "$rpm_out_dir" -name \*.rpm | xargs -r rm

    echo "osc build --no-service -k \"$rpm_out_dir\" $offline $repository $arch"

    if ! osc build --no-service -k "$rpm_out_dir" $offline $repository $arch; then
        die "osc build failed"
    fi

    echo "rpms saved in $rpm_out_dir"
}

main () {
    parse_opts "$@"

    for bs_dir in "${bs_dirs[@]}"; do
        bs_dir=$( cd "$bs_dir" && pwd ) || die "Invalid directory $bs_dir"
        build_rpm "$bs_dir"
    done
}

main "$@"
