#!/bin/bash
#
# Distribute the set of rpms most recently built via 'osc build' on
# the local system to one or more remote hosts, and optionally install
# them.  Useful for quick testing.

me=`basename $0`

usage () {
    # Call as: usage [EXITCODE] [USAGE MESSAGE]
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi
    if [ -n "$1" ]; then
        echo "$*" >&2
        echo
    fi

    cat <<EOF >&2
Usage: $me [options] HOST [HOST ...]
Options:
  -a, --add           Add rpms to existing install queue
  -d, --dir=DIR       Use rpms from DIR not from buildroot
                      (can be repeated)
  -i, --install       Process install queue
  -p, --proxy=PROXY   Install via ssh/scp from a proxy host
  -h, --help          Show this help
EOF
    exit "$exit_code"
}

parse_opts () {
    delete=--delete
    install=
    proxy_host=
    hosts=( )
    rpm_dirs=( )

    while [ -n "$1" ]; do
        case "$1" in
            -h|--help)
                usage 0
                ;;
            -a|--add)
                delete=
                shift
                ;;
            -d|--dir)
                rpm_paths=( `find "$2" -name \*.rpm` )
                if [ ${#rpm_paths[@]} = 0 ]; then
                    usage "No rpms found in $2."
                fi
                rpm_dirs+=( "$2" )
                shift 2
                ;;
            -i|--install)
                install=yes
                shift
                ;;
            -p|--proxy)
                proxy_host="$2"
                shift 2
                ;;
            -*)
                usage "Unrecognised option: $1"
                ;;
            *)
                break
                ;;
        esac
    done

    if [ ${#rpm_dirs[@]} = 0 ]; then
        rpm_dirs=( `find-buildroot-rpms --dir-only` )
        rpm_paths=( `find-buildroot-rpms --relative` )
    fi

    if [ ${#rpm_paths[@]} = 0 ]; then
        echo "No rpms found in buildroot!  Aborting." >&2
        exit 1
    fi

    if [ $# -lt 1 ]; then
        usage "You must supply at least one target host."
    fi

    target_hosts=( "$@" )
}

safe_run () {
    if ! "$@"; then
        echo "Failed to run $*; aborting." >&2
        exit 1
    fi
}

rsync_to () {
    local target="$1"
    safe_run rsync "${rsync_opts[@]}" ./ "$target"
}

dist_directly () {
    echo -e "ssh $target mkdir -p $rpms_rel_dest_dir ..."
    safe_run ssh $target mkdir -p "$rpms_rel_dest_dir"

    for rpms_dir in "${rpm_dirs[@]}"; do
        echo -e "\nrsync $rpms_dir/ to ${target}:$rpms_rel_dest_dir ...\n"
        cd "$rpms_dir"
        rsync_to "${target}:$rpms_rel_dest_dir"
    done
}

install_directly () {
    echo -e "Installing on $target_host ...\n"
    safe_run ssh $target \
        "find $rpms_rel_dest_dir -name '*.rpm' | xargs zypper -n in --force"
}

dist_dir_via_proxy () {
    rpms_dir="$1"
    echo -e "rsync $rpms_dir/ to ${proxy_host}:$rpms_rel_dest_dir ...\n"
    cd "$rpms_dir"
    rsync_to "${proxy_host}:$rpms_rel_dest_dir"
}

dist_via_proxy () {
    for rpms_dir in "${rpm_dirs[@]}"; do
        dist_dir_via_proxy "$rpms_dir"
    done

    div

    echo -e "rsync $rpms_rel_dest_dir/ from $proxy_host to ${target_hosts[@]} ...\n"
    safe_run ssh "$proxy_host" "
        cd $rpms_rel_dest_dir
        
        for target_host in ${target_hosts[@]}; do
            target=\"root@\$target_host\"
            ssh \$target mkdir -p $rpms_rel_dest_dir
            rsync ${rsync_opts[@]} ./ \${target}:$rpms_rel_dest_dir
        done"
}

install_via_proxy () {
    target_host="$1"
    echo -e "Installing on ${target_hosts[@]} ...\n"
    safe_run ssh "$proxy_host" "
        for target_host in ${target_hosts[@]}; do
            target=\"root@\$target_host\"
            ssh \$target 'find $rpms_rel_dest_dir -name \\*.rpm | xargs zypper -n in --force'
        done"
}

main () {
    parse_opts "$@"

    rpms_rel_dest_dir=tmp/RPMS

    rsync_opts=(
        -avR
        $delete
        --exclude='*-devel-*.noarch.rpm'
        --exclude='*.src.rpm'
    )

    if [ -z "$proxy_host" ]; then
        for target_host in "${target_hosts[@]}"; do
            target="root@$target_host"
            dist_directly

            if [ -n "$install" ]; then
                div
                install_directly
            fi
        done
    else
        dist_via_proxy

        if [ -n "$install" ]; then
            div
            install_via_proxy
        fi
    fi
}

# pscp () {
#     # http://code.google.com/p/parallel-ssh/issues/detail?id=67
#     export PSSH_OPTIONS='ControlPersist=no'
#
#     echo
#     echo "Parallel scp'ing rpms ..."
#     # while read host; do
#     #     scp "${rpms[@]}" $host:/root
#     # done < ~/HA/.pssh-hosts
#     if ! pscp -v "$@" "${rpms[@]}" /root; then
#         echo "pscp failed; aborting." >&2
#         exit 1
#     fi
#
#     if [ -n "$install" ]; then
#         echo
#         echo "Installing rpms ..."
#         #pssh -i -v "$@" rpm -Uhv --force "${rpms[@]##*/}"
#         pssh -i -v "$@" zypper -n in --force "${rpms[@]##*/}"
#     fi
# }

main "$@"
