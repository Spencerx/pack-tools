#!/bin/bash
#
# Locally build one or more rpms via 'osc build' (for a single
# repository/arch combination) from their package's working
# directories locally checked out from a Build Service.
#
# Optionally switches the source service URL to consume local sources.
# To enable this feature, you should ensure that an executable called
# 'source-dir-for' is on your $PATH, which accepts a Build Service
# working directory as the only parameter, and outputs the absolute
# path of the corresponding locally checked out source repository,
# which can then be consumed by the tar_scm source service.

me=`basename $0`

TAR_SCMS_XPATH="//service[@name='tar_scm']"

usage () {
    # Call as: usage [EXITCODE] [USAGE MESSAGE]
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi
    if [ -n "$1" ]; then
        echo "$*" >&2
        echo
    fi

    cat <<EOF >&2
Usage: $me [options] BSDIR [BSDIR ...]
Options:
  -c, --command=COMMAND  Run COMMAND instead of \`osc service disabledrun'
  -d, --disabledrun      Run \`osc service disabledrun' before build
  -l, --local-source     Switch tar_scm source service url to file://SRCDIR
                         as returned by 'source-dir-for BSDIR'.  Implies -d
                         unless -c is also specified.
  -r, --revision=REV     Switch tar_scm source service revision to REV.
                         Implies -d unless -c is also specified.
  -h, --help             Show this help
EOF
    exit "$exit_code"
}

parse_opts () {
    command=
    disabledrun=
    local_source=
    offline=
    revision=

    while [ -n "$1" ]; do
        case "$1" in
            -h|--help)
                usage 0
                ;;
            -c|--command)
                command="$2"
                shift 2
                ;;
            -d|--disabledrun)
                disabledrun=y
                shift
                ;;
            -l|--local-source)
                local_source=y
                shift
                ;;
            -r|--revision)
                revision="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done

    if [ $# = 0 ]; then
        usage "You must specify at least one rpm to build."
    fi

    if [ -z "$command" ]; then
        if [ -n "$local_source" ] || [ -n "$revision" ]; then
            disabledrun=y
        fi

        if [ -z "$disabledrun" ]; then
            usage "You must choose at least one of: -c, -d, -l, -r"
        fi
    fi

    bs_dirs=( "$@" )
}

die () {
    echo "$*; aborting." >&2
    exit 1
}

tweak_source_service () {
    local BS_pkg_dir="$1"

    if ! find_source_service_for_package "$BS_pkg_dir"; then
        die "Couldn't find source service at $src_svc"
    fi

    backup_service_files

    local orig_url=$(
        get_tar_scm_param_value \
            "filename" "${BS_pkg_dir##*/}" \
            "url" "$src_svc"
    )
    echo "Original URL: $orig_url"

    if [ -n "$local_source" ]; then
        if ! switch_source_service_url "$BS_pkg_dir" "$orig_url"; then
            die "Failed to switch source service for $BS_pkg_dir"
        fi
    fi

    if [ -n "$revision" ]; then
        if ! switch_source_service_revision "$BS_pkg_dir" "$revision"; then
            die "Failed to switch source service for $BS_pkg_dir"
        fi
    fi
}

find_source_service_for_package () {
    local BS_pkg_dir="$1"
    src_svc="$BS_pkg_dir/_service"
    svc_data="$BS_pkg_dir/_servicedata"

    if ! [ -e "$src_svc" ]; then
        return 1
    fi

    return 0
}

backup_service_files () {
    if ! src_svc_temp=$( mktemp "${src_svc}.build-rpms.XXXXXXXX" ); then
        die "Couldn't make temporary backup of $src_svc"
    fi
    cp "$src_svc" "$src_svc_temp"

    if [ -e "$svc_data" ]; then
        if ! svc_data_temp=$( mktemp "${src_svc}.build-rpms.XXXXXXXX" ); then
            die "Couldn't make temporary backup of $svc_data"
        fi
        cp "$svc_data" "$svc_data_temp"
    fi
}

switch_source_service_url () {
    local BS_pkg_dir="$1" orig_url="$2"

    if ! which source-dir-for >/dev/null 2>&1; then
        die "Couldn't find source-dir-for on \$PATH.  This is required in order
to splice a file:/// URL into _service so that the source service
can run on the local code tree.  Please follow the instructions
in the README which accompanies this utility."
    fi

    if ! src_dir=$( source-dir-for "$BS_pkg_dir" ); then
        die "Running source-dir-for $BS_pkg_dir failed"
    fi

    url="file://$src_dir"

    set_param_value "url" "$orig_url" "url" "$url" "$src_svc"
    set_param_value "url" "$orig_url" "url" "$url" "$svc_data"
}

switch_source_service_revision () {
    local BS_pkg_dir="$1" revision="$2"
    set_param_value "filename" "${BS_pkg_dir##*/}" "revision" "$revision"
}

calc_matching_param_xpath () {
    # Search for <service name="tar_scm"> which has specific
    # <param name="...">value</param>
    tar_scm_xpath="${TAR_SCMS_XPATH}[param[@name='$match_param']/text()[.='$match_val']]"

    # Now extract the required param from that
    param_xpath="$tar_scm_xpath/param[@name='$param']"
}

get_tar_scm_param_value () {
    local match_param="$1" match_val="$2"
    local param="$3"
    local file="${4:-$src_svc}"

    calc_matching_param_xpath

    xml sel --template --copy-of "$param_xpath/text()" --nl "$file"
}

set_param_value () {
    local match_param="$1" match_val="$2"
    local param="$3" new_value="$4"
    local file="${5:-$src_svc}"

    old_value=$(
        get_tar_scm_param_value "$match_param" "$match_val" "$param" "$file"
    )

    if [ -z "$old_value" ]; then
        die "Couldn't find <param name=\"$match_param\">$match_val</param> in $file"
    fi

    cat <<EOF

Setting '$param' parameter in ${file//$HOME/~}
  for <service name="tar_scm"> containing <param name="$match_param">$match_val</param>
    old: $old_value
    new: $new_value
EOF

    calc_matching_param_xpath
    xml edit --inplace --update "$param_xpath" --value "$new_value" "$file"
}

run_source_services () {
    BS_pkg_dir="$1"

    if [ -n "$local_source" -o -n "$revision" ]; then
        tweak_source_service "$BS_pkg_dir"
    fi

    if [ -n "$disabledrun" ]; then
        if ! osc service disabledrun; then
            die "disabledrun failed"
        fi
    fi

    if [ -n "$command" ]; then
        if ! $command; then
            die "$command failed"
        fi
    fi

    restore_service_files
}

restore_service_files () {
    if [ -e "$src_svc_temp" ]; then
        mv "$src_svc_temp" "$src_svc"
    fi
    if [ -e "$svc_data_temp" ]; then
        mv "$svc_data_temp" "$svc_data"
    fi
}

main () {
    parse_opts "$@"

    for bs_dir in "${bs_dirs[@]}"; do
        bs_dir=$( cd "$bs_dir" && pwd ) || die "Invalid directory $bs_dir"
        run_source_services "$bs_dir"
    done
}

main "$@"
