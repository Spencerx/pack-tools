#!/bin/bash
#
# Locally build one or more rpms via 'osc build' (for a single
# repository/arch combination) from their package's working
# directories locally checked out from a Build Service.
#
# Optionally switches the source service URL to consume local sources.
# To enable this feature, you should ensure that an executable called
# 'source-dir-for' is on your $PATH, which accepts a Build Service
# working directory as the only parameter, and outputs the absolute
# path of the corresponding locally checked out source repository,
# which can then be consumed by the tar_scm source service.

me=`basename $0`

usage () {
    # Call as: usage [EXITCODE] [USAGE MESSAGE]
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi
    if [ -n "$1" ]; then
        echo "$*" >&2
        echo
    fi

    cat <<EOF >&2
Usage: $me [options] BSDIR [BSDIR ...]
Options:
  -d, --disabledrun      Run \`osc service disabledrun' before build
  -l, --local-source     Switch tar_scm source service URL to file://SRCDIR
                         as returned by 'source-dir-for BSDIR'.  Implies -d.
  -r, --repository=REPO  Build for repository REPO
  -a, --arch=ARCH        Build for arch ARCH
  -o, --offline          (option passed to osc build)
  -h, --help             Show this help
EOF
    exit "$exit_code"
}

parse_opts () {
    disabledrun=
    local_source=
    offline=

    while [ -n "$1" ]; do
        case "$1" in
            -h|--help)
                usage 0
                ;;
            -o)
                offline=-o
                shift
                ;;
            -d|--disabledrun)
                disabledrun=y
                shift
                ;;
            -l|--local-source)
                local_source=y
                disabledrun=y
                shift
                ;;
            -r|--repository)
                repository="$2"
                shift 2
                ;;
            -a|--arch)
                arch="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done

    if [ $# = 0 ]; then
        usage "You must specify at least one rpm to build."
    fi

    if [ -n "$arch" ] && [ -z "$repository" ]; then
        usage "Cannot specify arch without repository."
    fi

    bs_dirs=( "$@" )
}

switch_source_service () {
    local src_srv="$1" url="$2"

    perl -Mstrict -wlni -e '
      if (m!(\s*<param name="url">)(.+)(</param>)!) {
          my $url = q{'$url'};
          if ($2 ne $url) {
              print "$1$url$3";
              print STDERR "Switched repo from $2 to $url";
          }
          else {
              print;
              print STDERR "Using repo: $2";
          }
      }
      else {
        print
      }' "$src_svc"
}

die () {
    echo "$*; aborting." >&2
    exit 1
}

switch_package_source_service () {
    local BS_pkg_dir="$1"
    local src_svc="$BS_pkg_dir/_service"

    if ! [ -e "$src_svc" ]; then
        echo "Couldn't find source service at $src_svc; ignoring -l for $rpm"
        return 1
    fi

    if ! src_dir=$( source-dir-for "$BS_pkg_dir" ); then
        die "Running source-dir-for $BS_pkg_dir failed; aborting."
    fi

    switch_source_service "$src_svc" "file://$src_dir"
}

build_rpm () {
    local BS_pkg_dir="$1"

    if [ ! -d "$BS_pkg_dir" ]; then
        die "$BS_pkg_dir does not exist; aborting."
    fi

    cd $BS_pkg_dir

    if [ -n "$local_source" ]; then
        if ! switch_package_source_service "$BS_pkg_dir"; then
            die "Failed to switch source service for $BS_pkg_dir"
        fi
    fi

    if [ -n "$disabledrun" ]; then
        if ! osc service disabledrun; then
            die "disabledrun failed; aborting."
        fi
    fi

    d="${BS_pkg_dir#$HOME/}"
    rpm_out_dir="$HOME/tmp/build-rpms/${d//\//_}"

    mkdir -p "$rpm_out_dir"
    if ! osc build -k "$rpm_out_dir" $offline $repository $arch; then
        die "osc build failed; aborting."
    fi

    echo "rpms saved in $rpm_out_dir"
}

main () {
    parse_opts "$@"

    for bs_dir in "${bs_dirs[@]}"; do
        build_rpm "$bs_dir"
    done
}

main "$@"
